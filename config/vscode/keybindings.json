// Place your key bindings in this file to override the defaults
[
    /* Enable sensible VSCode defaults
    --------------------------------------------------------------------------*/
    /* Editing */
    {
        "key": "ctrl+oem_2",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus"
    },
    /* LSP */
    {
        "key": "f2",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    /* Clipboard */
    {
        "key": "ctrl+x",
        "command": "editor.action.clipboardCutAction",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+c",
        "command": "editor.action.clipboardCopyAction",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+v",
        "command": "editor.action.clipboardPasteAction",
        "when": "textInputFocus && !editorReadonly"
    },
    /* Escape */
    {
        "key": "escape",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.hideFindWidget",
        "when": "terminalFindWidgetVisible && terminalFocus"
    },
    {
        "key": "escape",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "escape",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "command": "closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "escape",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "escape",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "escape",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "escape",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "escape",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
    },
    /* Acceptance */
    {
        "key": "enter",
        "command": "acceptRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    /* Cancellation */
    {
        "key": "escape",
        "command": "editor.cancelOperation",
        "when": "cancellableOperation"
    },
    {
        "key": "escape",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "escape",
        "command": "cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    /* Auto suggestion */
    {
        "key": "tab",
        "command": "insertNextSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    {
        "key": "shift+tab",
        "command": "insertPrevSuggestion",
        "when": "hasOtherSuggestions && textInputFocus && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    /* File explorer */
    {
        "key": "ctrl+n",
        "command": "workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+x",
        "command": "filesExplorer.cut",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+c",
        "command": "filesExplorer.copy",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
    },
    {
        "key": "ctrl+v",
        "command": "filesExplorer.paste",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "delete",
        "command": "deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceMoveableToTrash && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "escape",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    /* Terminal */
    {
        "key": "ctrl+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalTextSelected"
    },
    {
        "key": "ctrl+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.clearSelection",
        "when": "terminalFocus && terminalTextSelected && !terminalFindWidgetVisible"
    },
    {
        "key": "escape",
        "command": "workbench.action.terminal.navigationModeExit",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus"
    },
    /* Keyboard shortcuts UI */
    {
        "key": "escape",
        "command": "keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "down",
        "command": "keybindings.editor.focusKeybindings",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    /* Line editing
        NOTE: These bindings are excluded from vim mode, because they don't
        translate to proper vim movements, causing issues in selection mode.
    --------------------------------------------------------------------------*/
    {
        "key": "up",
        "command": "cursorUp",
        "when": "textInputFocus && !vim.active"
    },
    {
        "key": "down",
        "command": "cursorDown",
        "when": "textInputFocus && !vim.active"
    },
    {
        "key": "left",
        "command": "cursorLeft",
        "when": "textInputFocus && !vim.active"
    },
    {
        "key": "right",
        "command": "cursorRight",
        "when": "textInputFocus && !vim.active"
    },
    {
        "key": "home",
        "command": "cursorHome",
        "when": "textInputFocus && !vim.active"
    },
    {
        "key": "end",
        "command": "cursorEnd",
        "when": "textInputFocus && !vim.active"
    },
    /* Text selection
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+a",
        "command": "editor.action.selectAll",
        "when": "textInputFocus && !vim.active"
    },
    /* Command palette
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+shift+;",
        "command": "workbench.action.showCommands"
    },
    /* Escape
    --------------------------------------------------------------------------*/
    {
        "key": "escape",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "workbench.action.closePanel"
                },
                {
                    "command": "workbench.view.explorer"
                },
                {
                    "command": "references-view.clear"
                },
                {
                    "command": "search.action.clearSearchResults"
                },
                {
                    "command": "workbench.action.focusActiveEditorGroup"
                },
                {
                    "command": "extension.vim_escape"
                },
            ]
        }
    },
    /* Tab management
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+h",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.nextEditor"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+w",
        "command": "workbench.action.closeActiveEditor"
    },
    /* File management
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+o",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+f",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.saveAll"
    },
    /* TODO: Needs keybinding. */
    {
        "key": "shift+alt+r",
        "command": "revealFileInOS",
        "when": "!editorFocus"
    },
    /* Window/group management
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+alt+l",
        "command": "workbench.action.focusNextGroup"
    },
    {
        "key": "ctrl+alt+h",
        "command": "workbench.action.focusPreviousGroup"
    },
    {
        "key": "ctrl+alt+n",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "ctrl+alt+p",
        "command": "workbench.action.splitEditorDown"
    },
    {
        "key": "ctrl+alt+w",
        "command": "workbench.action.closeGroup"
    },
    {
        "key": "ctrl+alt+s",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+alt+g",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    /* NOTE: Needed for PowerToys remapping. */
    {
        "key": "f11",
        "command": "workbench.action.toggleFullScreen"
    },
    /* Snippet completion
    --------------------------------------------------------------------------*/
    {
        "key": "right",
        "command": "insertBestCompletion",
        "when": "atEndOfWord && !hasOtherSuggestions && !inSnippetMode && !suggestWidgetVisible && config.editor.tabCompletion == 'on'"
    },
    /* Auto suggestion
    --------------------------------------------------------------------------*/
    {
        "key": "enter",
        "command": "acceptSelectedSuggestion",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus"
    },
    {
        "key": "right",
        "command": "acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        /* NOTE: Explicitly unbound. The behavior should match our shell. */
        "key": "tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "escape",
        "when": "suggestWidgetVisible && textInputFocus",
        "command": "runCommands",
        "args": {
            "commands": [
                {
                    "command": "hideSuggestWidget"
                },
                {
                    "command": "extension.vim_escape"
                },
            ]
        }
    },
    /* Formatting
    --------------------------------------------------------------------------*/
    {
        "key": ";",
        "command": "editor.action.formatSelection",
        "when": "editorTextFocus && vim.active && ( vim.mode == 'Visual' || vim.mode == 'VisualLine' || vim.mode == 'VisualBlock' )",
    },
    {
        "key": "ctrl+;",
        "command": "editor.action.formatDocument"
    },
    /* Navigation
    --------------------------------------------------------------------------*/
    {
        "key": "pageup",
        "command": "editorScroll",
        "args": {
            "to": "up",
            "by": "wrappedLine",
            "revealCursor": true,
            "value": 20
        }
    },
    {
        "key": "pagedown",
        "command": "editorScroll",
        "args": {
            "to": "down",
            "by": "wrappedLine",
            "revealCursor": true,
            "value": 20
        }
    },
    /* Terminal
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "ctrl+shift+t",
        "command": "workbench.action.terminal.openNativeConsole"
    },
    /* VSCodeVim
    --------------------------------------------------------------------------*/
    {
        "key": "alt+v",
        "command": "vim.remap",
        "when": "inputFocus && vim.mode == 'Normal'",
        "args": {
            "after": [
                "<C-v>"
            ]
        }
    },
    /* Chat
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+n",
        "command": "workbench.action.chat.newChat",
        "when": "chatIsEnabled && inChat && chatLocation != 'editing-session'"
    },
    {
        "key": "ctrl+l",
        "command": "-workbench.action.chat.newChat",
        "when": "chatIsEnabled && inChat && chatLocation != 'editing-session'"
    },
    /* Quick fix
    --------------------------------------------------------------------------*/
    /* TODO: Needs a better keybinding. */
    {
        "key": "ctrl+space",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    /* TODO: Needs a better keybinding. */
    {
        "key": "ctrl+space",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    },
    /* Disable VSCodeVIM defaults
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+o",
        "command": "-extension.vim_ctrl+o",
        "when": "editorTextFocus && vim.active && vim.use<C-o> && !inDebugRepl"
    },
    /* Disable all other VSCode defaults
    --------------------------------------------------------------------------*/
    {
        "key": "ctrl+alt+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+i",
        "command": "-editor.action.insertCursorAtEndOfEachLineSelected",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k ctrl+c",
        "command": "-editor.action.addCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+d",
        "command": "-editor.action.addSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+oem_period",
        "command": "-editor.action.autoFix",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)quickfix\\b/"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.quickInputBack",
        "when": "inQuickOpen"
    },
    {
        "key": "shift+alt+h",
        "command": "-references-view.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider"
    },
    {
        "key": "ctrl+f2",
        "command": "-editor.action.changeAll",
        "when": "editorTextFocus && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k m",
        "command": "-workbench.action.editor.changeLanguageMode"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "ctrl+insert",
        "command": "-editor.action.clipboardCopyAction",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+alt+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+down",
        "command": "-editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+up",
        "command": "-editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+u",
        "command": "-cursorUndo",
        "when": "textInputFocus"
    },
    {
        "key": "shift+delete",
        "command": "-editor.action.clipboardCutAction",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.continue",
        "when": "inDebugMode"
    },
    {
        "key": "shift+f9",
        "command": "-editor.debug.action.toggleInlineBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+f4",
        "command": "-extension.node-debug.pickLoadedScript",
        "when": "debugType == 'chrome'"
    },
    {
        "key": "f6",
        "command": "-workbench.action.debug.pause",
        "when": "debugState == 'running'"
    },
    {
        "key": "ctrl+shift+f5",
        "command": "-workbench.action.debug.restart",
        "when": "inDebugMode"
    },
    {
        "key": "ctrl+f5",
        "command": "-workbench.action.debug.run"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.debug.action.showDebugHover",
        "when": "editorTextFocus && inDebugMode"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "!inDebugMode"
    },
    {
        "key": "f10",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node'"
    },
    {
        "key": "f11",
        "command": "-workbench.action.debug.stepInto",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f11",
        "command": "-workbench.action.debug.stepOut",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "f10",
        "command": "-workbench.action.debug.stepOver",
        "when": "debugState == 'stopped'"
    },
    {
        "key": "shift+f5",
        "command": "-workbench.action.debug.stop",
        "when": "inDebugMode"
    },
    {
        "key": "f9",
        "command": "-editor.debug.action.toggleBreakpoint",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "tab",
        "command": "-editor.emmet.action.expandAbbreviation",
        "when": "config.emmet.triggerExpansionOnTab && editorTextFocus && !editorReadonly && !editorTabMovesFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+k e",
        "command": "-workbench.files.action.focusOpenEditorsView",
        "when": "workbench.explorer.openEditorsView.active"
    },
    {
        "key": "ctrl+k c",
        "command": "-workbench.files.action.compareWithClipboard"
    },
    {
        "key": "ctrl+k d",
        "command": "-workbench.files.action.compareWithSaved"
    },
    {
        "key": "shift+alt+c",
        "command": "-copyFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k ctrl+shift+c",
        "command": "-copyRelativeFilePath",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k o",
        "command": "-workbench.action.files.showOpenedFileInNewWindow"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile"
    },
    {
        "key": "ctrl+k ctrl+o",
        "command": "-workbench.action.files.openFolder"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "shift+alt+r",
        "command": "-revealFileInOS",
        "when": "!editorFocus"
    },
    {
        "key": "ctrl+k s",
        "command": "-workbench.action.files.saveAll"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+k ctrl+shift+s",
        "command": "-workbench.action.files.saveWithoutFormatting"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "enter",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+f3",
        "command": "-editor.action.nextSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+shift+f3",
        "command": "-editor.action.previousSelectionMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+oem_period",
        "command": "-breadcrumbs.focusAndSelect",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+shift+oem_4",
        "command": "-editor.fold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_2",
        "command": "-editor.foldAllBlockComments",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+8",
        "command": "-editor.foldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+1",
        "command": "-editor.foldLevel1",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+2",
        "command": "-editor.foldLevel2",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+3",
        "command": "-editor.foldLevel3",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+4",
        "command": "-editor.foldLevel4",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+5",
        "command": "-editor.foldLevel5",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+6",
        "command": "-editor.foldLevel6",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+7",
        "command": "-editor.foldLevel7",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_4",
        "command": "-editor.foldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument",
        "when": "editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+f",
        "command": "-editor.action.formatDocument.none",
        "when": "editorTextFocus && !editorHasDocumentFormattingProvider && !editorHasDocumentFormattingProvider && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+f",
        "command": "-editor.action.formatSelection",
        "when": "editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.navigateBack"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.navigateForward"
    },
    {
        "key": "ctrl+shift+oem_5",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+f12",
        "command": "-editor.action.goToImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k ctrl+q",
        "command": "-workbench.action.navigateToLastEditLocation"
    },
    {
        "key": "ctrl+g",
        "command": "-workbench.action.gotoLine"
    },
    {
        "key": "f7",
        "command": "-editor.action.diffReview.next",
        "when": "isInDiffEditor"
    },
    {
        "key": "alt+f8",
        "command": "-editor.action.marker.next",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "f8",
        "command": "-editor.action.marker.nextInFiles",
        "when": "editorFocus && !editorReadonly"
    },
    {
        "key": "f7",
        "command": "-editor.action.wordHighlight.next",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.diffReview.prev",
        "when": "isInDiffEditor"
    },
    {
        "key": "shift+alt+f8",
        "command": "-editor.action.marker.prev",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+f8",
        "command": "-editor.action.marker.prevInFiles",
        "when": "editorFocus && !editorReadonly"
    },
    {
        "key": "shift+f7",
        "command": "-editor.action.wordHighlight.prev",
        "when": "editorTextFocus && hasWordHighlights"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+o",
        "command": "-workbench.action.gotoSymbol"
    },
    {
        "key": "ctrl+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "escape",
        "command": "-workbench.action.hideInterfaceOverview",
        "when": "interfaceOverviewVisible"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+oem_6",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-editor.action.insertLineBefore",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    /* NOTE: Are these the line swap commands? */
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "escape",
        "command": "-notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+k f12",
        "command": "-editor.action.revealDefinitionAside",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "shift+alt+o",
        "command": "-editor.action.organizeImports",
        "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
    },
    {
        "key": "ctrl+oem_4",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+insert",
        "command": "-editor.action.clipboardPasteAction",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.showCallHierarchy",
        "when": "editorHasCallHierarchyProvider && editorTextFocus && !inReferenceSearchEditor"
    },
    {
        "key": "alt+f12",
        "command": "-editor.action.peekDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+shift+f12",
        "command": "-editor.action.peekImplementation",
        "when": "editorHasImplementationProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "ctrl+k ctrl+t",
        "command": "-workbench.action.selectTheme"
    },
    {
        "key": "ctrl+k ctrl+m",
        "command": "-workbench.extensions.action.showRecommendedKeymapExtensions"
    },
    {
        "key": "ctrl+k ctrl+s",
        "command": "-workbench.action.openGlobalKeybindings"
    },
    {
        "key": "ctrl+oem_period",
        "command": "-editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+f12",
        "command": "-references-view.find",
        "when": "editorHasReferenceProvider"
    },
    {
        "key": "shift+enter",
        "command": "-editor.refocusCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "ctrl+k ctrl+u",
        "command": "-editor.action.removeCommentLine",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "enter",
        "command": "-repl.action.acceptInput",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction"
    },
    {
        "key": "ctrl+shift+oem_period",
        "command": "-editor.action.inPlaceReplace.down",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+oem_comma",
        "command": "-editor.action.inPlaceReplace.up",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.action.findInFiles"
    },
    {
        "key": "f4",
        "command": "-search.action.focusNextSearchResult",
        "when": "hasSearchResult"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult"
    },
    {
        "key": "shift+f4",
        "command": "-search.action.focusPreviousSearchResult",
        "when": "hasSearchResult"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+h",
        "command": "-workbench.action.replaceInFiles"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-search.action.rerunEditorSearch",
        "when": "editorLangId == 'search-result' && editorLangId == 'search-result'"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-editor.action.selectHighlights",
        "when": "editorFocus"
    },
    {
        "key": "alt+f1",
        "command": "-editor.action.showAccessibilityHelp",
        "when": "editorFocus"
    },
    {
        "key": "f1",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "shift+f10",
        "command": "-editor.action.showContextMenu",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+oem_3",
        "command": "-workbench.action.terminal.new"
    },
    {
        "key": "ctrl+backspace",
        "command": "-workbench.action.terminal.deleteWordLeft",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+delete",
        "command": "-workbench.action.terminal.deleteWordRight",
        "when": "terminalFocus"
    },
    {
        "key": "shift+enter",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "enter",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "shift+f3",
        "command": "-workbench.action.terminal.findPrevious",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFindWidget",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "ctrl+down",
        "command": "-workbench.action.terminal.navigationModeFocusNext",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus"
    },
    {
        "key": "alt+down",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+right",
        "command": "-workbench.action.terminal.focusNextPane",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+up",
        "command": "-workbench.action.terminal.navigationModeFocusPrevious",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus"
    },
    {
        "key": "alt+up",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "alt+left",
        "command": "-workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus"
    },
    {
        "key": "shift+escape",
        "command": "-workbench.action.terminal.hideFindWidget",
        "when": "terminalFindWidgetVisible && terminalFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+pagedown",
        "command": "-workbench.action.terminal.scrollDown",
        "when": "terminalFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-workbench.action.terminal.scrollDownPage",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+end",
        "command": "-workbench.action.terminal.scrollToBottom",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+home",
        "command": "-workbench.action.terminal.scrollToTop",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+alt+pageup",
        "command": "-workbench.action.terminal.scrollUp",
        "when": "terminalFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-workbench.action.terminal.scrollUpPage",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+5",
        "command": "-workbench.action.terminal.split",
        "when": "terminalFocus"
    },
    {
        "key": "alt+c",
        "command": "-workbench.action.terminal.toggleFindCaseSensitive",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "alt+r",
        "command": "-workbench.action.terminal.toggleFindRegex",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "alt+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindWidgetFocused"
    },
    {
        "key": "shift+alt+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+h",
        "command": "-editor.toggleCallHierarchy",
        "when": "callHierarchyVisible"
    },
    {
        "key": "ctrl+k ctrl+l",
        "command": "-editor.toggleFold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    {
        "key": "ctrl+l ctrl+m",
        "command": "-editor.action.toggleTabFocusMode",
        "when": "textInputFocus && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "ctrl+space",
        "command": "-workbench.action.terminal.requestCompletions",
        "when": "config.terminal.integrated.suggest.enabled && terminalFocus && terminalProcessSupported && terminalShellIntegrationEnabled"
    },
    {
        "key": "ctrl+space",
        "command": "-focusSuggestion",
        "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
    },
    {
        "key": "ctrl+space",
        "command": "-toggleSuggestionDetails",
        "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+space",
        "command": "-workbench.action.terminal.sendSequence",
        "when": "terminalFocus && terminalShellIntegrationEnabled && !accessibilityModeEnabled && terminalShellType == 'pwsh'"
    },
    {
        "key": "ctrl+space",
        "command": "-editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+k ctrl+x",
        "command": "-editor.action.trimTrailingWhitespace",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+oem_6",
        "command": "-editor.unfold",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+9",
        "command": "-editor.unfoldAllMarkerRegions",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+oem_6",
        "command": "-editor.unfoldRecursively",
        "when": "editorTextFocus && foldingEnabled"
    },
    {
        "key": "ctrl+k ctrl+shift+w",
        "command": "-workbench.action.closeAllGroups"
    },
    {
        "key": "ctrl+k ctrl+w",
        "command": "-workbench.action.closeAllEditors"
    },
    {
        "key": "ctrl+k w",
        "command": "-workbench.action.closeEditorsInGroup"
    },
    {
        "key": "ctrl+f4",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+k u",
        "command": "-workbench.action.closeUnmodifiedEditors"
    },
    {
        "key": "ctrl+shift+y",
        "command": "-workbench.debug.action.toggleRepl"
    },
    {
        "key": "ctrl+k ctrl+up",
        "command": "-workbench.action.focusAboveGroup"
    },
    {
        "key": "ctrl+k ctrl+down",
        "command": "-workbench.action.focusBelowGroup"
    },
    {
        "key": "ctrl+1",
        "command": "-workbench.action.focusFirstEditorGroup"
    },
    {
        "key": "ctrl+0",
        "command": "-workbench.action.focusSideBar"
    },
    {
        "key": "ctrl+k ctrl+left",
        "command": "-workbench.action.focusLeftGroup"
    },
    {
        "key": "ctrl+k ctrl+right",
        "command": "-workbench.action.focusRightGroup"
    },
    {
        "key": "ctrl+k enter",
        "command": "-workbench.action.keepEditor"
    },
    {
        "key": "ctrl+k down",
        "command": "-workbench.action.moveActiveEditorGroupDown"
    },
    {
        "key": "ctrl+k left",
        "command": "-workbench.action.moveActiveEditorGroupLeft"
    },
    {
        "key": "ctrl+k right",
        "command": "-workbench.action.moveActiveEditorGroupRight"
    },
    {
        "key": "ctrl+k up",
        "command": "-workbench.action.moveActiveEditorGroupUp"
    },
    {
        "key": "shift+alt+1",
        "command": "-workbench.action.moveEditorToFirstGroup"
    },
    {
        "key": "shift+alt+9",
        "command": "-workbench.action.moveEditorToLastGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+shift+pageup",
        "command": "-workbench.action.moveEditorLeftInGroup"
    },
    {
        "key": "ctrl+shift+pagedown",
        "command": "-workbench.action.moveEditorRightInGroup"
    },
    {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "alt+0",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+pagedown",
        "command": "-workbench.action.nextEditor"
    },
    {
        "key": "ctrl+tab",
        "command": "-workbench.action.openNextRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+pageup",
        "command": "-workbench.action.previousEditor"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "-workbench.action.openPreviousRecentlyUsedEditorInGroup"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quickOpenView"
    },
    {
        "key": "ctrl+shift+t",
        "command": "-workbench.action.reopenClosedEditor"
    },
    {
        "key": "ctrl+numpad0",
        "command": "-workbench.action.zoomReset"
    },
    {
        "key": "ctrl+k ctrl+p",
        "command": "-workbench.action.showAllEditors"
    },
    {
        "key": "ctrl+shift+d",
        "command": "-workbench.view.debug"
    },
    {
        "key": "ctrl+shift+e",
        "command": "-workbench.view.explorer"
    },
    {
        "key": "ctrl+shift+x",
        "command": "-workbench.view.extensions"
    },
    {
        "key": "ctrl+shift+g",
        "command": "-workbench.view.scm"
    },
    {
        "key": "ctrl+shift+f",
        "command": "-workbench.view.search",
        "when": "!searchViewletVisible"
    },
    {
        "key": "ctrl+oem_5",
        "command": "-workbench.action.splitEditor"
    },
    {
        "key": "ctrl+k ctrl+oem_5",
        "command": "-workbench.action.splitEditorOrthogonal"
    },
    {
        "key": "f11",
        "command": "-workbench.action.toggleFullScreen"
    },
    {
        "key": "ctrl+oem_3",
        "command": "-workbench.action.terminal.toggleTerminal"
    },
    {
        "key": "ctrl+shift+u",
        "command": "-workbench.action.output.toggleOutput"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "shift+alt+0",
        "command": "-workbench.action.toggleEditorGroupLayout"
    },
    {
        "key": "alt+z",
        "command": "-editor.action.toggleWordWrap"
    },
    {
        "key": "ctrl+k z",
        "command": "-workbench.action.toggleZenMode"
    },
    {
        "key": "ctrl+numpad_add",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+shift+oem_plus",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+oem_plus",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "ctrl+numpad_subtract",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+shift+oem_minus",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+oem_minus",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "ctrl+k f",
        "command": "-workbench.action.closeFolder"
    },
    {
        "key": "shift+enter",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+tab",
        "command": "-acceptSelectedSuggestion",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "-addCursorsAtSearchResults",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+;",
        "command": "-breadcrumbs.focus",
        "when": "breadcrumbsPossible && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+oem_1",
        "command": "-breadcrumbs.focus",
        "when": "breadcrumbsPossible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+right",
        "command": "-breadcrumbs.focusNextWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "left",
        "command": "-breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+left",
        "command": "-breadcrumbs.focusPreviousWithPicker",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "ctrl+enter",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "space",
        "command": "-breadcrumbs.revealFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+enter",
        "command": "-breadcrumbs.revealFocusedFromTreeAside",
        "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"
    },
    {
        "key": "escape",
        "command": "-breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "down",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "enter",
        "command": "-breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+shift+oem_period",
        "command": "-breadcrumbs.toggleToOn",
        "when": "!config.breadcrumbs.enabled"
    },
    {
        "key": "enter",
        "command": "-breakpointWidget.action.acceptInput",
        "when": "breakpointWidgetVisible && inBreakpointWidget"
    },
    {
        "key": "shift+escape",
        "command": "-cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "shift+escape",
        "command": "-cancelSelection",
        "when": "editorHasSelection && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
    },
    {
        "key": "shift+escape",
        "command": "-closeDirtyDiff",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeFindWidget",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
    },
    {
        "key": "shift+escape",
        "command": "-closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+end",
        "command": "-cursorBottom",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+end",
        "command": "-cursorBottomSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+down",
        "command": "-cursorColumnSelectDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+left",
        "command": "-cursorColumnSelectLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pagedown",
        "command": "-cursorColumnSelectPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+pageup",
        "command": "-cursorColumnSelectPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+right",
        "command": "-cursorColumnSelectRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+alt+up",
        "command": "-cursorColumnSelectUp",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+down",
        "command": "-cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+down",
        "command": "-cursorDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+end",
        "command": "-cursorEndSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+home",
        "command": "-cursorHomeSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+left",
        "command": "-cursorLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pagedown",
        "command": "-cursorPageDown",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pagedown",
        "command": "-cursorPageDownSelect",
        "when": "textInputFocus"
    },
    {
        "key": "pageup",
        "command": "-cursorPageUp",
        "when": "textInputFocus"
    },
    {
        "key": "shift+pageup",
        "command": "-cursorPageUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+right",
        "command": "-cursorRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+home",
        "command": "-cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+home",
        "command": "-cursorTop",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+home",
        "command": "-cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+home",
        "command": "-cursorTopSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+up",
        "command": "-cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "shift+up",
        "command": "-cursorUpSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-cursorWordAccessibilityLeft",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "ctrl+shift+left",
        "command": "-cursorWordAccessibilityLeftSelect",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "ctrl+right",
        "command": "-cursorWordAccessibilityRight",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "ctrl+shift+right",
        "command": "-cursorWordAccessibilityRightSelect",
        "when": "accessibilityModeEnabled && textInputFocus"
    },
    {
        "key": "ctrl+right",
        "command": "-cursorWordEndRight",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+right",
        "command": "-cursorWordEndRightSelect",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+left",
        "command": "-cursorWordStartLeft",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+shift+left",
        "command": "-cursorWordStartLeftSelect",
        "when": "textInputFocus"
    },
    {
        "key": "alt+enter",
        "command": "-debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "ctrl+enter",
        "command": "-debug.openBreakpointToSide",
        "when": "breakpointsFocused"
    },
    {
        "key": "delete",
        "command": "-debug.removeBreakpoint",
        "when": "breakpointsFocused && !breakpointSelected"
    },
    {
        "key": "delete",
        "command": "-debug.removeWatchExpression",
        "when": "watchExpressionsFocused && !expressionSelected"
    },
    {
        "key": "f2",
        "command": "-debug.renameWatchExpression",
        "when": "watchExpressionsFocused"
    },
    {
        "key": "f2",
        "command": "-debug.setVariable",
        "when": "variablesFocused"
    },
    {
        "key": "space",
        "command": "-debug.toggleBreakpoint",
        "when": "breakpointsFocused && !inputFocus"
    },
    {
        "key": "shift+delete",
        "command": "-deleteFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
    },
    {
        "key": "shift+backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "backspace",
        "command": "-deleteLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "delete",
        "command": "-deleteRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+backspace",
        "command": "-deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+delete",
        "command": "-deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+z",
        "command": "-editor.action.customEditor.redo",
        "when": "focusedCustomEditorIsEditable && !inputFocus"
    },
    {
        "key": "ctrl+y",
        "command": "-editor.action.customEditor.redo",
        "when": "focusedCustomEditorIsEditable && !inputFocus"
    },
    {
        "key": "ctrl+z",
        "command": "-editor.action.customEditor.undo",
        "when": "focusedCustomEditorIsEditable && !inputFocus"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-editor.action.defineKeybinding",
        "when": "editorTextFocus && !editorReadonly && editorLangId == 'jsonc'"
    },
    {
        "key": "enter",
        "command": "-editor.action.extensioneditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.extensioneditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        /* TODO: Consider `/` aka `oem_2` ) */
        "key": "ctrl+f",
        "command": "-editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "ctrl+alt+enter",
        "command": "-editor.action.replaceAll",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "ctrl+shift+1",
        "command": "-editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "enter",
        "command": "-editor.action.replaceOne",
        "when": "editorFocus && findWidgetVisible && replaceInputFocussed"
    },
    {
        "key": "alt+enter",
        "command": "-editor.action.selectAllMatches",
        "when": "editorFocus && findWidgetVisible"
    },
    {
        "key": "enter",
        "command": "-editor.action.webvieweditor.findNext",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.webvieweditor.findPrevious",
        "when": "webviewFindWidgetFocused && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "-editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+a",
        "command": "-editor.action.webvieweditor.selectAll",
        "when": "!editorFocus && !inputFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+f",
        "command": "-editor.action.webvieweditor.showFind",
        "when": "!editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "escape",
        "command": "-editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
    },
    {
        "key": "f12",
        "command": "-editor.gotoNextSymbolFromResult",
        "when": "hasSymbols"
    },
    {
        "key": "escape",
        "command": "-editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
    },
    {
        "key": "ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus"
    },
    {
        "key": "ctrl+l ctrl+l",
        "command": "-expandLineSelection",
        "when": "textInputFocus && editorLangId == 'latex'"
    },
    {
        "key": "ctrl+enter",
        "command": "-explorer.openToSide",
        "when": "explorerViewletFocus && explorerViewletVisible && !inputFocus"
    },
    {
        "key": "shift+alt+f",
        "command": "-filesExplorer.findInFolder",
        "when": "explorerResourceIsFolder && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "space",
        "command": "-filesExplorer.openFilePreserveFocus",
        "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
    },
    {
        "key": "home",
        "command": "-firstCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "f12",
        "command": "-goToNextReference",
        "when": "referenceSearchVisible"
    },
    {
        "key": "f4",
        "command": "-goToNextReference",
        "when": "referenceSearchVisible"
    },
    {
        "key": "f12",
        "command": "-goToNextReferenceFromEmbeddedEditor",
        "when": "inReferenceSearchEditor"
    },
    {
        "key": "f4",
        "command": "-goToNextReferenceFromEmbeddedEditor",
        "when": "inReferenceSearchEditor"
    },
    {
        "key": "shift+f12",
        "command": "-goToPreviousReference",
        "when": "referenceSearchVisible"
    },
    {
        "key": "shift+f4",
        "command": "-goToPreviousReference",
        "when": "referenceSearchVisible"
    },
    {
        "key": "shift+f12",
        "command": "-goToPreviousReferenceFromEmbeddedEditor",
        "when": "inReferenceSearchEditor"
    },
    {
        "key": "shift+f4",
        "command": "-goToPreviousReferenceFromEmbeddedEditor",
        "when": "inReferenceSearchEditor"
    },
    {
        "key": "shift+escape",
        "command": "-hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+down",
        "command": "-history.showNext",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "down",
        "command": "-history.showNext",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "alt+up",
        "command": "-history.showPrevious",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "up",
        "command": "-history.showPrevious",
        "when": "historyNavigationEnabled && historyNavigationWidget"
    },
    {
        "key": "tab",
        "command": "-insertSnippet",
        "when": "editorTextFocus && hasSnippetCompletions && !editorTabMovesFocus && !inSnippetMode"
    },
    {
        "key": "tab",
        "command": "-jumpToNextSnippetPlaceholder",
        "when": "editorTextFocus && hasNextTabstop && inSnippetMode"
    },
    {
        "key": "shift+tab",
        "command": "-jumpToPrevSnippetPlaceholder",
        "when": "editorTextFocus && hasPrevTabstop && inSnippetMode"
    },
    {
        "key": "ctrl+c",
        "command": "-keybindings.editor.copyKeybindingEntry",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+k",
        "command": "-keybindings.editor.defineKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+k ctrl+e",
        "command": "-keybindings.editor.defineWhenExpression",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "alt+k",
        "command": "-keybindings.editor.recordSearchKeys",
        "when": "inKeybindings && inKeybindingsSearch"
    },
    {
        "key": "delete",
        "command": "-keybindings.editor.removeKeybinding",
        "when": "inKeybindings && keybindingFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "alt+p",
        "command": "-keybindings.editor.toggleSortByPrecedence",
        "when": "inKeybindings"
    },
    {
        "key": "end",
        "command": "-lastCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown.showPreview",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+k v",
        "command": "-markdown.showPreviewToSide",
        "when": "editorLangId == 'markdown'"
    },
    {
        "key": "ctrl+; ctrl+a",
        "command": "-testing.debugAll"
    },
    {
        "key": "ctrl+; ctrl+e",
        "command": "-testing.debugFailTests"
    },
    {
        "key": "ctrl+; ctrl+l",
        "command": "-testing.debugLastRun"
    },
    {
        "key": "ctrl+; ctrl+c",
        "command": "-testing.debugAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+f",
        "command": "-testing.debugCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+m",
        "command": "-testing.openOutputPeek"
    },
    {
        "key": "ctrl+; ctrl+r",
        "command": "-testing.refreshTests",
        "when": "testing.canRefresh"
    },
    {
        "key": "ctrl+; e",
        "command": "-testing.reRunFailTests"
    },
    {
        "key": "ctrl+; l",
        "command": "-testing.reRunLastRun"
    },
    {
        "key": "ctrl+; ctrl+shift+l",
        "command": "-testing.coverageLastRun"
    },
    {
        "key": "ctrl+; a",
        "command": "-testing.runAll"
    },
    {
        "key": "ctrl+; ctrl+shift+a",
        "command": "-testing.coverageAll"
    },
    {
        "key": "ctrl+; c",
        "command": "-testing.runAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+shift+c",
        "command": "-testing.coverageAtCursor",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; f",
        "command": "-testing.runCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+shift+f",
        "command": "-testing.coverageCurrentFile",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+; ctrl+o",
        "command": "-testing.showMostRecentOutput",
        "when": "testing.hasAnyResults"
    },
    {
        "key": "ctrl+; ctrl+shift+i",
        "command": "-testing.toggleInlineCoverage"
    },
    {
        "key": "ctrl+; ctrl+i",
        "command": "-testing.toggleInlineTestOutput"
    },
    {
        "key": "ctrl+; ctrl+x",
        "command": "-testing.cancelRun"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor && !operationInProgress"
    }
]